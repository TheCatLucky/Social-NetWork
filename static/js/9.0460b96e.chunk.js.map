{"version":3,"sources":["Social/Pages/Chat/ChatPage.module.css","Social/Pages/Chat/ChatPage.tsx"],"names":["module","exports","Chat","useState","ws","setWs","useEffect","newWebSocket","closeHandler","console","log","setTimeout","connect","WebSocket","addEventListener","removeEventListener","close","Messages","AddMessageForm","messages","setMessages","handleMessage","e","newMessages","JSON","parse","data","prevMessages","className","style","map","m","i","Message","src","photo","alt","img","userName","message","setMessage","readyStatus","setReadyStatus","handleOpen","onChange","currentTarget","value","disabled","onClick","send","ChatPage"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,IAAM,sBAAsB,SAAW,6B,4FCmBnDC,EAAW,WAChB,MAAoBC,mBAA2B,MAA/C,mBAAOC,EAAP,KAAWC,EAAX,KAmBA,OAlBAC,qBAAU,WACT,IAAIC,EACEC,EAAe,WACpBC,QAAQC,IAAI,UACZC,WAAWC,EAAS,MAErB,SAASA,IAAW,IAAD,EAEN,QAAZ,EADAL,EAAe,IAAIM,UAAU,uEAC7B,SAAcC,iBAAiB,QAASN,GACxCH,EAAME,GAGP,OADAK,IACO,WACNL,EAAaQ,oBAAoB,QAASP,GAC1CD,EAAaS,WAEZ,IAGF,qCACC,cAACC,EAAD,CAAUb,GAAIA,IACd,cAACc,EAAD,CAAgBd,GAAIA,QAIjBa,EAAwB,SAAC,GAAY,IAAVb,EAAS,EAATA,GAChC,EAAgCD,mBAA6B,IAA7D,mBAAOgB,EAAP,KAAiBC,EAAjB,KAWA,OAVAd,qBAAU,WACT,IAAMe,EAAgB,SAACC,GACnB,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAClCN,GAAY,SAACO,GAAD,4BAAsBA,GAAtB,YAAuCJ,QAGpD,OADE,OAAFnB,QAAE,IAAFA,KAAIU,iBAAiB,UAAWO,GACzB,WACJ,OAAFjB,QAAE,IAAFA,KAAIW,oBAAoB,UAAWM,MAElC,CAACjB,IAEH,qBAAKwB,UAAWC,IAAMV,SAAtB,SACEA,EAASW,KAAI,SAACC,EAAGC,GAAJ,OACb,cAACC,EAAD,CAAiBd,SAAUY,GAAbC,SAQZC,EAAqB,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SAC7B,OACC,gCACC,qBAAKe,IAAKf,EAASgB,MAAOC,IAAI,OAAOR,UAAWC,IAAMQ,MACtD,4BAAIlB,EAASmB,WACb,uBACCnB,EAASoB,QACV,2BAIGrB,EAA8B,SAAC,GAAY,IAAVd,EAAS,EAATA,GACtC,EAA8BD,mBAAS,IAAvC,mBAAOoC,EAAP,KAAgBC,EAAhB,KACA,EAAsCrC,mBAA8B,WAApE,mBAAOsC,EAAP,KAAoBC,EAApB,KAEApC,qBAAU,WACT,IAAMqC,EAAa,WAClBD,EAAe,UAGhB,OADE,OAAFtC,QAAE,IAAFA,KAAIU,iBAAiB,OAAQ6B,GACtB,WACJ,OAAFvC,QAAE,IAAFA,KAAIW,oBAAoB,OAAQ4B,MAE/B,CAACvC,IAWJ,OACC,gCACC,uBAAOwC,SALY,SAACtB,GACrBkB,EAAWlB,EAAEuB,cAAcC,QAIKA,MAAOP,IACtC,wBAAQQ,SAAiB,OAAP3C,GAA+B,UAAhBqC,EAAyBO,QAbxC,WACdT,IAGH,OAAFnC,QAAE,IAAFA,KAAI6C,KAAKV,GACTC,EAAW,MAQV,sBAOYU,UAxGM,WACpB,OACC,gCACE,IACD,sCACA,cAAChD,EAAD","file":"static/js/9.0460b96e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"ChatPage_img__1xyvp\",\"messages\":\"ChatPage_messages__3_KrT\"};","import { ChangeEvent, FC, useEffect, useState } from \"react\";\r\nimport style from \"./ChatPage.module.css\";\r\n\r\nexport type ChatMessage = {\r\n\tmessage: string;\r\n\tphoto: string;\r\n\tuserId: number;\r\n\tuserName: string;\r\n};\r\ntype PropsWS = { ws: WebSocket | null };\r\nconst ChatPage: FC = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\" \"}\r\n\t\t\t<h1>Chat</h1>\r\n\t\t\t<Chat />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst Chat: FC = () => {\r\n\tconst [ws, setWs] = useState<WebSocket | null>(null);\r\n\tuseEffect(() => {\r\n\t\tlet newWebSocket: WebSocket;\r\n\t\tconst closeHandler = () => {\r\n\t\t\tconsole.log(\"closed\");\r\n\t\t\tsetTimeout(connect, 3000);\r\n\t\t};\r\n\t\tfunction connect() {\r\n\t\t\tnewWebSocket = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\");\r\n\t\t\tnewWebSocket?.addEventListener(\"close\", closeHandler);\r\n\t\t\tsetWs(newWebSocket);\r\n\t\t}\r\n\t\tconnect();\r\n\t\treturn () => {\r\n\t\t\tnewWebSocket.removeEventListener(\"close\", closeHandler);\r\n\t\t\tnewWebSocket.close();\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Messages ws={ws} />\r\n\t\t\t<AddMessageForm ws={ws} />\r\n\t\t</>\r\n\t);\r\n};\r\nconst Messages: FC<PropsWS> = ({ ws }) => {\r\n\tconst [messages, setMessages] = useState<Array<ChatMessage>>([]);\r\n\tuseEffect(() => {\r\n\t\tconst handleMessage = (e: MessageEvent) => {\r\n      let newMessages = JSON.parse(e.data);\r\n\t\t\tsetMessages((prevMessages) => [...prevMessages, ...newMessages]);\r\n\t\t};\r\n\t\tws?.addEventListener(\"message\", handleMessage);\r\n\t\treturn () => {\r\n\t\t\tws?.removeEventListener(\"message\", handleMessage);\r\n\t\t};\r\n\t}, [ws]);\r\n\treturn (\r\n\t\t<div className={style.messages}>\r\n\t\t\t{messages.map((m, i) => (\r\n\t\t\t\t<Message key={i} messages={m} />\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\ntype Props = {\r\n\tmessages: ChatMessage;\r\n};\r\nconst Message: FC<Props> = ({ messages }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<img src={messages.photo} alt=\"user\" className={style.img} />\r\n\t\t\t<b>{messages.userName}</b>\r\n\t\t\t<br />\r\n\t\t\t{messages.message}\r\n\t\t\t<hr />\r\n\t\t</div>\r\n\t);\r\n};\r\nconst AddMessageForm: FC<PropsWS> = ({ ws }) => {\r\n\tconst [message, setMessage] = useState(\"\");\r\n\tconst [readyStatus, setReadyStatus] = useState<\"pending\" | \"ready\">(\"pending\");\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleOpen = () => {\r\n\t\t\tsetReadyStatus(\"ready\");\r\n\t\t};\r\n\t\tws?.addEventListener(\"open\", handleOpen);\r\n\t\treturn () => {\r\n\t\t\tws?.removeEventListener(\"open\", handleOpen);\r\n\t\t};\r\n\t}, [ws]);\r\n\tconst sendMessage = () => {\r\n\t\tif (!message) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tws?.send(message);\r\n\t\tsetMessage(\"\");\r\n\t};\r\n\tconst handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetMessage(e.currentTarget.value);\r\n\t};\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input onChange={handleChange} value={message}></input>\r\n\t\t\t<button disabled={ws === null || readyStatus !== \"ready\"} onClick={sendMessage}>\r\n\t\t\t\tSend\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ChatPage;\r\n"],"sourceRoot":""}